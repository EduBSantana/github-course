(Cria pasta no diretório atual)
$ mkdir [nome-pasta]

(Configura nome de usuário)
$ git config --global user.name "[nome]"

(Configura email)
$ git config --global user.email "[email]"

(Configura editor (VIM vem por padrão) )
$ git config --global core.editor [editor]

(Exibe valor de alguma chave)
$ git config [chave]

(Configura Alias)
$ git config --global alias.[tecla-atalho] [nome-comando]

(Iniciar repositório)
$ git init

(Editar arquivo (com VIM) )
$ vim [nome-arquivo]

(Criar .gitignore)
$ vi .gitignore

(Reportar como está o repositório no momento)
$ git status

(Adicionar arquivos na stage)
$ git add [nome-arquivo]

(Commitar (Fechar uma nova versão) )
$ git commit -m "[mensagem]"

(Ver logs (Commmits) )
$ git log

	(Filtrar por autor)
	$ git log --author="[nome]"

(Ver logs de forma mais simples)
$ git shortlog

	(Mostrar apenas o nome e quantidade de commits)
	$ git shortlog -sn

(Mostrar de forma gráfica o que está acontecendo com os brands)
$ git log --graph

(Mostrar o que foi feito no commit pelo hash)
$ git show [hash]

(Mostrar alterações antes de commitar)
$ git diff

(Mostrar apenas o nome dos arquivos que foram modificados)
$ git diff --name-only

(Adicionar na área de stage e commitar)
$ git commit -am "[mensagem]"

(Retornar arquivo para antes da edição)
$ git checkout [nome-arquivo]

(Retirar arquivo da área de stage)
$ git reset HEAD [nome-arquivo]

(Retira commit e deixa arquivos na área de stage)
$ git reset --soft [hash-anterior]

(Retira commit e volta os arquivos para o estado de modified)
$ git reset --mixed [hash-anterior]

(Retira commit e tudo o que foi feito nele)
$ git reset --hard [hash-anterior]

(Mostra chave SSH pública)
$ cat [nome-arquivo.pub]
$ more [nome-arquivo.pub]
$ vim [nome-arquivo.pub]

(Criar novo branch e entra no mesmo)
$ git checkout -b [nome-branch]

(Mostra branchs existentes e em qual estamos)
$ git branch

(Muda de branch)
$ git checkout [nome-branch]

(Deleta branch)
$ git branch -D [nome-branch]

(Deleta branch do repositório remoto)
git push origin master :[branch]

(Faz um Merge)
$ git merge [nome-branch]

(Faz um Rebase)
$ gir rebase [nome-branch]

(Guarda arquivos modificados para commitar depois (Limpa a branch) )
$ git stash

(Aplica stash e arquivos guardados voltam para modified na branch)
$ git stash apply

(Mostra lista de stash)
$ git stash list

(Limpa tudo que está no stash)
$ git stash clear

(Cria uma tag)
$ git tag -a [versao] -m "[mensagem]"

(Apaga tag do repositório local)
$ git tag -d [versao]

(Apaga tag do repositório remoto)
$ git push origin :[versao]

(Envia tags para o repositório remoto)
$ git push origin master --tags

(Ver tags geradas)
$ git tags

(Desfaz alterações do commit sem apagá-lo)
$ git revert [hash-commit-errado]

--------------- Conectando Repositório local a um remoto ---------------

(Adciona repositório remoto)
$ git remote add origin [endereco-do-repositorio-remoto-no-github]

(Verifica repositório remoto)
$ git remote

	(Mostra mais informações sobre)
	$ git remote -v

(Envia arquivos, modificações e logs para o repositório remoto)
$ git push -u origin master

(Clona repositório remoto para máquina local)
$ git clone [endereco-repositorio-github] [nome]

